function []=InverseDynamics(AnalysisParameters)
% Computation of the inverse dynamics step
%   Computation of joint torques from joint coordinates, external forces
%   and a biomechanical model
%
%	Based on:
%	- Featherstone, R., 2014. Rigid body dynamics algorithms. Springer.
%
%   INPUT
%   - AnalysisParameters: parameters of the musculoskeletal analysis,
%   automatically generated by the graphic interface 'Analysis'.
%   OUTPUT
%   Results are automatically saved on the folder associated to each motion
%   capture in variable 'InverseDynamicsResults'.
%________________________________________________________
%
% Licence
% Toolbox distributed under GPL 3.0 Licence
%________________________________________________________
%
% Authors : Antoine Muller, Charles Pontonnier, Pierre Puchaud and
% Georges Dumont
%________________________________________________________

parfor num_fil = 1:numel(AnalysisParameters.filename)
    filename = AnalysisParameters.filename{num_fil}(1:end-(numel(AnalysisParameters.General.Extension)-1));

    disp(['Inverse dynamics (' filename ') ...'])

    %% Chargement des variables
    BiomechanicalModel = load('BiomechanicalModel.mat'); 
    BiomechanicalModel = BiomechanicalModel.BiomechanicalModel;
    Human_model = BiomechanicalModel.OsteoArticularModel;
    here = pwd ;                                                                   
    cd(filename)
        ExperimentalData =  load('ExperimentalData.mat');
        ExperimentalData = ExperimentalData.ExperimentalData;
        time = ExperimentalData.Time;
        InverseKinematicsResults=load('InverseKinematicsResults.mat'); 
        InverseKinematicsResults = InverseKinematicsResults.InverseKinematicsResults;
    cd(here)  
    q = InverseKinematicsResults.JointCoordinates';
    if isfield(InverseKinematicsResults,'FreeJointCoordinates')
        q6dof = InverseKinematicsResults.FreeJointCoordinates';
    else
        PelvisPosition = InverseKinematicsResults.PelvisPosition;
        PelvisOrientation = InverseKinematicsResults.PelvisOrientation;
    end
    here = pwd ;   
    cd(filename)   
        ExternalForcesComputationResults= load('ExternalForcesComputationResults.mat');    
    cd (here) 
    ExternalForcesComputationResults = ExternalForcesComputationResults.ExternalForcesComputationResults;
    if AnalysisParameters.ID.InputData == 0
        external_forces = ExternalForcesComputationResults.NoExternalForce;
    elseif AnalysisParameters.ID.InputData == 1
        external_forces = ExternalForcesComputationResults.ExternalForcesExperiments;
    elseif AnalysisParameters.ID.InputData == 2
        external_forces = ExternalForcesComputationResults.ExternalForcesPrediction;
    end

    freq=1/time(2);

    %% Gravité (Gravity)
    g=[0 0 -9.81]';

    %% get rid of the 6DOF joint
    if isfield(InverseKinematicsResults,'FreeJointCoordinates')
        Human_model(Human_model(end).child).mother = 0;
        Human_model=Human_model(1:(numel(Human_model)-6));
   end

    dt=1/freq;

        %somehow this should be filtered in a similar manner as the forces
        %and the joint positions

    dq=derivee2(dt,q);  % velocities
 if AnalysisParameters.IK.FilterActive
             % data filtering
      dq=filt_data(dq,AnalysisParameters.IK.FilterCutOff,freq);
 end

    
    
    ddq=derivee2(dt,dq);  % accelerations
    nbframe=size(q,1);
if AnalysisParameters.IK.FilterActive
             % data filtering
      ddq=filt_data(ddq,AnalysisParameters.IK.FilterCutOff,freq);
 end


%% Pelvis kinematics

    % Kinematical data for Pelvis (Position/speed/acceleration/angles/angular speed/angular acceleration)

    if isfield(InverseKinematicsResults,'FreeJointCoordinates')
        p_pelvis=q6dof(:,1:3);  % frame i : p_pelvis(i,:)
        r_pelvis=cell(size(q6dof,1),1);
        for i=1:size(q6dof,1)
            r_pelvis{i}=Rodrigues([1 0 0]',q6dof(i,4))*Rodrigues([0 1 0]',q6dof(i,5))*Rodrigues([0 0 1]',q6dof(i,6)); %(x,y,z) : frame i : r_pelvis{i}
        end
    else
        p_pelvis = cell2mat(PelvisPosition)';
        r_pelvis  = PelvisOrientation';
    end
    
    %dR
    dR=zeros(3,3,nbframe);
    for ligne=1:3
        for colonne=1:3
            dR(ligne,colonne,:)=derivee2(dt,cell2mat(cellfun(@(b) b(ligne,colonne),r_pelvis,'UniformOutput',false)));
        end
    end
    w=zeros(nbframe,3);
    for i=1:nbframe
       wmat=dR(:,:,i)*r_pelvis{i}';
       w(i,:)=[wmat(3,2),wmat(1,3),wmat(2,1)];
    end
    % if AnalysisParameters.IK.FilterActive
    %          % data filtering
    %   w=filt_data(w,AnalysisParameters.IK.FilterCutOff,freq);
    % end
    % if AnalysisParameters.IK.FilterActive
    %          % data filtering
    %  p_pelvis=filt_data(p_pelvis,AnalysisParameters.IK.FilterCutOff,freq);
    %  end
    v=derivee2(dt,p_pelvis);


    vw=zeros(nbframe,3);
    for i=1:nbframe
        vw(i,:)=cross(p_pelvis(i,:),w(i,:));
    end
    v0=v+vw;
    % if AnalysisParameters.IK.FilterActive
    %          % data filtering
    %   v0=filt_data(v0,AnalysisParameters.IK.FilterCutOff,freq);
    %  end
    % dv0
    dv0=derivee2(dt,v0);
    % if AnalysisParameters.IK.FilterActive
    %          % data filtering
    %   dv0=filt_data(dv0,AnalysisParameters.IK.FilterCutOff,freq);
    %  end

    dw=derivee2(dt,w);
    % if AnalysisParameters.IK.FilterActive
    %          % data filtering
    %   dw=filt_data(dw,AnalysisParameters.IK.FilterCutOff,freq);
    %  end

    %somehow filtering the pelvis motion is suppressing too much info
    %% Inverse dynamics
    torques=zeros(nbframe,numel(Human_model));
    f6dof=zeros(3,nbframe);
    t6dof0=zeros(3,nbframe);
    t6dof=t6dof0;
    FContactDyn=struct('F',[],'T',[]);
    h = waitbar(0,['Inverse Dynamics (' filename ')']);
    for i=1:nbframe
        % setting position/speed/acceleration for each joint
        Human_model(1).p=p_pelvis(i,:)';
        Human_model(1).R=r_pelvis{i};
        Human_model(1).v0=v0(i,:)';
        Human_model(1).w=w(i,:)';
        Human_model(1).dv0=dv0(i,:)';
        Human_model(1).dw=dw(i,:)';    
        for j=2:numel(Human_model)
            Human_model(j).q=q(i,j); %#ok<*SAGROW>
            Human_model(j).dq=dq(i,j);
            Human_model(j).ddq=ddq(i,j);
        end
        Human_model = ForwardAllKinematics(Human_model,1);
        [Human_model,f6dof(:,i),t6dof0(:,i)]=InverseDynamicsSolid(Human_model,external_forces(i).fext,g,1);
        % Expression of moment reduced at the point of the 6DOF
        t6dof(:,i) = t6dof0(:,i) + cross(f6dof(:,i),p_pelvis(i,:)'); 
        torques(i,2:end)=[Human_model.torques];
        for j=2:numel(Human_model)
            FContactDyn(j).F(:,i) = Human_model(j).f; FContactDyn(j).T(:,i) = Human_model(j).t;
        end
        waitbar(i/nbframe)
    end
    close(h)
    torques=torques';
    InverseDynamicsResults=[];
    SaveDataID(filename,InverseDynamicsResults,f6dof,t6dof,torques,FContactDyn);

    
    disp(['... Inverse dynamics (' filename ') done'])
    
end

end

