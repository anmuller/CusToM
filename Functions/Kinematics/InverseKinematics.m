function [] = InverseKinematics(AnalysisParameters,varargin)
% Computation of the inverse kinematics step
%   Computation of joint coordinates from motion capture data and a
%   biomechanical model
%
%	Based on:
% 	- Lu, T. W., & O’connor, J. J. (1999).
%	Bone position estimation from skin marker co-ordinates using global optimisation with joint constraints. Journal of biomechanics, 32(2), 129-134.
%
%   INPUT
%   - AnalysisParameters: parameters of the musculoskeletal analysis,
%   automatically generated by the graphic interface 'Analysis';
%   - varargin: if the function 'InverseKinematics' is used in a
%   calibration step, the variable 'BiomechanicalModel' is defined as an
%   input.
%   OUTPUT
%   Results are automatically saved on the folder associated to each motion
%   capture in variables 'ExperimentalData' and 'InverseKinematicsResults'.
%________________________________________________________
%
% Licence
% Toolbox distributed under GPL 3.0 Licence
%________________________________________________________
%
% Authors : Antoine Muller, Charles Pontonnier, Pierre Puchaud and
% Georges Dumont
%________________________________________________________

if numel(varargin)
    BiomechanicalModel = varargin{1};
else
    load('BiomechanicalModel.mat'); %#ok<LOAD>
end

% Inverse kinematics

if numel(AnalysisParameters.filename) ==1
    i=1;
    if isequal(AnalysisParameters.General.InputData, @MVNX_V3) % Load inverse kinematics from a MVNX
        MVNXInverseKinematics(AnalysisParameters.filename{i}(1:end-(numel(AnalysisParameters.General.Extension)-1)), AnalysisParameters);
    else
        filename = AnalysisParameters.filename{i}(1:end-(numel(AnalysisParameters.General.Extension)-1));
        if AnalysisParameters.IK.Method == 1
            [ExperimentalData, InverseKinematicsResults] = InverseKinematicsOpti(filename,AnalysisParameters,BiomechanicalModel); % Optimization method
        elseif AnalysisParameters.IK.Method == 2
            [ExperimentalData, InverseKinematicsResults] = InverseKinematicsLM(filename,AnalysisParameters,BiomechanicalModel); % Levenberg-Marquardt algorithm
        end
        
        % Save data
        SaveDataIK(filename,ExperimentalData,InverseKinematicsResults);
    end

else
    
    parfor i = 1:numel(AnalysisParameters.filename)
        if isequal(AnalysisParameters.General.InputData, @MVNX_V3) % Load inverse kinematics from a MVNX
            MVNXInverseKinematics(AnalysisParameters.filename{i}(1:end-(numel(AnalysisParameters.General.Extension)-1)), AnalysisParameters);
        else
            filename = AnalysisParameters.filename{i}(1:end-(numel(AnalysisParameters.General.Extension)-1));
            if AnalysisParameters.IK.Method == 1
                [ExperimentalData, InverseKinematicsResults] = InverseKinematicsOpti(filename,AnalysisParameters,BiomechanicalModel); % Optimization method
            elseif AnalysisParameters.IK.Method == 2
                [ExperimentalData, InverseKinematicsResults] = InverseKinematicsLM(filename,AnalysisParameters,BiomechanicalModel); % Levenberg-Marquardt algorithm
            end
            
            % Save data
            SaveDataIK(filename,ExperimentalData,InverseKinematicsResults);
        end
    end
end




end