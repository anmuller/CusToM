function [Human_model]=BoneView(DataXSens,Human_model,BiomechanicalModel,ModelParameters)
% Preparing the bone view for animation
%
%   INPUT
%   - DataXSens : binary number to know if we are using XSens Data
%   - BiomechanicalModel : complete model (see the Documentation for the structure)
%   - ModelParameters: parameters of the musculoskeletal model,
%   automatically generated by the graphic interface 'GenerateParameters' 
%   - Segment : vector of the number of the solids that will be plotted 
%
%
%   OUTPUT
%   - Human_mode : osteo-articular model (see the Documentation for the structure)
%________________________________________________________
%
% Licence
% Toolbox distributed under GPL 3.0 Licence
%________________________________________________________
%
% Authors : Antoine Muller, Charles Pontonnier, Pierre Puchaud and
% Georges Dumont
%________________________________________________________

if ~DataXSens
% scaling factors.
if isfield(BiomechanicalModel,'GeometricalCalibration') && isfield(BiomechanicalModel.GeometricalCalibration,'k_calib') && ~isfield(BiomechanicalModel.GeometricalCalibration,'k_markers')
    k_calib = BiomechanicalModel.GeometricalCalibration.k_calib;
    k = (ModelParameters.Size/1.80)*k_calib;
else
    k = repmat((ModelParameters.Size/1.80),[numel(Human_model),1]);
end
bonespath=which('ModelGeneration.m');
bonespath = fullfile(fileparts(bonespath),'Visual');
for ii=find([Human_model.Visual])
    if isfield(Human_model,'visual_file')
        if numel(Human_model(ii).visual_file) % a visual could be associated to this solid
            if exist(fullfile(bonespath,Human_model(ii).visual_file),'file') % this visual exists
                load(fullfile(bonespath,Human_model(ii).visual_file));
                nb_faces=4500;
                if length(t)>nb_faces
                    bone.faces=t;
                    bone.vertices=p;
                    
                    bone_red=reducepatch(bone,nb_faces);
                    Human_model(ii).V=1.2063*k(ii)*bone_red.vertices;
                    Human_model(ii).F=bone_red.faces;
                else
                    Human_model(ii).V=k(ii)*p;
                    Human_model(ii).F=t;
                end
            end
        end
    end
end
else
    for ii=find([Human_model.Visual])
        load(['Visual/' Human_model(ii).name]); 
        Human_model(ii).V = p;
        Human_model(ii).F=t;
    end
end

end